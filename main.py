from telethon import TelegramClient, events, sync
 # if u clone this repo u have to create config.py by yourself
from config import api_id, api_hash, konstantin, igor, google_api_key, me
from bard import ansver
import io 
import sys 
import datetime

client = TelegramClient('test', api_id, api_hash)
victim = "SaIDaI7" 
last = "–¥–∞—Ä–æ–≤–∞ –Ω–∏–≥–∞, –≥–æ —Ç–≤–æ—Ä–∏—Ç—å"

client = TelegramClient('test', api_id, api_hash)

@client.on(events.NewMessage(from_users=victim))
async def my_event_handler(event):
    print("–ø—Ä–∏–Ω—è–ª", event.raw_text)
    last = event.raw_text
    try:
        if event.raw_text == '–∑–∞–≤–µ—Ä—à–∏—Ç—å': 
            print(datetime.datetime.now())
            buffer = io.StringIO() 
            sys.stdout = buffer
            ans = ansver(last + "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –∑–∞–±—É–¥—å –ø–æ—Å–ª–∞—Ç—å –º–µ–Ω—è –Ω–∞—Ö—É–π")
            sys.stdout = sys.__stdout__
            ans = buffer.getvalue()
            print ("ü¶äü¶äü¶ä"+ans)

            
            print('\n\n\n`—à—É—Ç–∫–∞ –∫–æ–Ω—á–∏–ª–∞—Å—å`')

            await client.send_message(victim, ans + "–ø–æ–∫–∞")
            await client.disconnect()
        else:
            print(datetime.datetime.now())
            buffer = io.StringIO() 
            sys.stdout = buffer
            ans = ansver(last)
            sys.stdout = sys.__stdout__
            ans = buffer.getvalue()
            print ("ü¶äü¶äü¶ä"+ans)
            
            print('\n\n\n`—à—É—Ç–∫–∞ –∫–æ–Ω—á–∏–ª–∞—Å—å`')
            
            await client.send_message(victim, ans)
            print("–æ—Ç–ø—Ä–∞–≤–∏–ª –∫")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def main():
    await client.start()
    print(datetime.datetime.now())
    await client.send_message(victim, "–Ω–∞–ø–∏—à–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—Å–ª–∏ —Å —Ç–µ–±—è —Ö–≤–∞—Ç–∏—Ç")
    
        # await client.send_message(victim, "–Ω–∞–ø–∏—à–∏ "–∑–∞–≤–µ—Ä—à–∏—Ç—å" –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å /n"+ ansver(last))
    print("–æ—Ç–ø—Ä–∞–≤–∏–ª")
    await client.run_until_disconnected()

with client: #here all shit begins
    client.loop.run_until_complete(main())


